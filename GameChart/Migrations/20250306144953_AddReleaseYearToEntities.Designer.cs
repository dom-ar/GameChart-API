// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Repository;

#nullable disable

namespace GameChart.Migrations
{
    [DbContext(typeof(RepositoryContext))]
    [Migration("20250306144953_AddReleaseYearToEntities")]
    partial class AddReleaseYearToEntities
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Entities.Models.Developer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("DeveloperId");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Location")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<string>("WebsiteUrl")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Developers");
                });

            modelBuilder.Entity("Entities.Models.Dlc", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("DlcId");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("GameId")
                        .HasColumnType("integer");

                    b.Property<int>("PublisherId")
                        .HasColumnType("integer");

                    b.Property<int?>("ReleasedOnYear")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("PublisherId");

                    b.ToTable("Dlcs");
                });

            modelBuilder.Entity("Entities.Models.DlcRelease", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("ReleaseId");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("DlcId")
                        .HasColumnType("integer");

                    b.Property<int>("PlatformId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ReleaseDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer");

                    b.Property<string>("TimeFrame")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DlcId");

                    b.HasIndex("PlatformId");

                    b.HasIndex("StatusId");

                    b.ToTable("DlcReleases");
                });

            modelBuilder.Entity("Entities.Models.Engine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("EngineId");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<string>("WebsiteUrl")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Engines");
                });

            modelBuilder.Entity("Entities.Models.Franchise", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("FranchiseId");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.HasKey("Id");

                    b.ToTable("Franchises");
                });

            modelBuilder.Entity("Entities.Models.Game", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("GameId");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int?>("EngineId")
                        .HasColumnType("integer");

                    b.Property<int?>("FranchiseId")
                        .HasColumnType("integer");

                    b.Property<int?>("PublisherId")
                        .HasColumnType("integer");

                    b.Property<int?>("ReleasedOnYear")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.HasKey("Id");

                    b.HasIndex("EngineId");

                    b.HasIndex("FranchiseId");

                    b.HasIndex("PublisherId");

                    b.ToTable("Games");
                });

            modelBuilder.Entity("Entities.Models.GameRelease", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("ReleaseId");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("GameId")
                        .HasColumnType("integer");

                    b.Property<int>("PlatformId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ReleaseDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer");

                    b.Property<string>("StoreUrl")
                        .HasColumnType("text");

                    b.Property<string>("TimeFrame")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("PlatformId");

                    b.HasIndex("StatusId");

                    b.ToTable("GameReleases");
                });

            modelBuilder.Entity("Entities.Models.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("GenreId");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.HasKey("Id");

                    b.ToTable("Genres");
                });

            modelBuilder.Entity("Entities.Models.Joint_Models.DlcDevelopers", b =>
                {
                    b.Property<int>("DlcId")
                        .HasColumnType("integer");

                    b.Property<int>("DeveloperId")
                        .HasColumnType("integer");

                    b.HasKey("DlcId", "DeveloperId");

                    b.HasIndex("DeveloperId");

                    b.ToTable("DlcDevelopers");
                });

            modelBuilder.Entity("Entities.Models.Joint_Models.DlcGenres", b =>
                {
                    b.Property<int>("DlcId")
                        .HasColumnType("integer");

                    b.Property<int>("GenreId")
                        .HasColumnType("integer");

                    b.HasKey("DlcId", "GenreId");

                    b.HasIndex("GenreId");

                    b.ToTable("DlcGenres");
                });

            modelBuilder.Entity("Entities.Models.Joint_Models.GameDevelopers", b =>
                {
                    b.Property<int>("GameId")
                        .HasColumnType("integer");

                    b.Property<int>("DeveloperId")
                        .HasColumnType("integer");

                    b.HasKey("GameId", "DeveloperId");

                    b.HasIndex("DeveloperId");

                    b.ToTable("GameDevelopers");
                });

            modelBuilder.Entity("Entities.Models.Joint_Models.GameGenres", b =>
                {
                    b.Property<int>("GameId")
                        .HasColumnType("integer");

                    b.Property<int>("GenreId")
                        .HasColumnType("integer");

                    b.HasKey("GameId", "GenreId");

                    b.HasIndex("GenreId");

                    b.ToTable("GameGenres");
                });

            modelBuilder.Entity("Entities.Models.Platform", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("PlatformId");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.HasKey("Id");

                    b.ToTable("Platforms");
                });

            modelBuilder.Entity("Entities.Models.Publisher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("PublisherId");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Country")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.HasKey("Id");

                    b.ToTable("Publishers");
                });

            modelBuilder.Entity("Entities.Models.Status", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("StatusId");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.HasKey("Id");

                    b.ToTable("Status");
                });

            modelBuilder.Entity("Entities.Models.Dlc", b =>
                {
                    b.HasOne("Entities.Models.Game", "Game")
                        .WithMany("Dlc")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.Publisher", "Publisher")
                        .WithMany("Dlcs")
                        .HasForeignKey("PublisherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("Publisher");
                });

            modelBuilder.Entity("Entities.Models.DlcRelease", b =>
                {
                    b.HasOne("Entities.Models.Dlc", "Dlc")
                        .WithMany("DlcReleases")
                        .HasForeignKey("DlcId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.Platform", "Platform")
                        .WithMany("DlcReleases")
                        .HasForeignKey("PlatformId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.Status", "Status")
                        .WithMany("DlcReleases")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dlc");

                    b.Navigation("Platform");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Entities.Models.Game", b =>
                {
                    b.HasOne("Entities.Models.Engine", "Engine")
                        .WithMany("Games")
                        .HasForeignKey("EngineId");

                    b.HasOne("Entities.Models.Franchise", "Franchise")
                        .WithMany("Games")
                        .HasForeignKey("FranchiseId");

                    b.HasOne("Entities.Models.Publisher", "Publisher")
                        .WithMany("Games")
                        .HasForeignKey("PublisherId");

                    b.Navigation("Engine");

                    b.Navigation("Franchise");

                    b.Navigation("Publisher");
                });

            modelBuilder.Entity("Entities.Models.GameRelease", b =>
                {
                    b.HasOne("Entities.Models.Game", "Game")
                        .WithMany("GameReleases")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.Platform", "Platform")
                        .WithMany("GameReleases")
                        .HasForeignKey("PlatformId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.Status", "Status")
                        .WithMany("GameReleases")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("Platform");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Entities.Models.Joint_Models.DlcDevelopers", b =>
                {
                    b.HasOne("Entities.Models.Developer", "Developer")
                        .WithMany("DlcDevelopers")
                        .HasForeignKey("DeveloperId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.Dlc", "Dlc")
                        .WithMany("DlcDevelopers")
                        .HasForeignKey("DlcId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Developer");

                    b.Navigation("Dlc");
                });

            modelBuilder.Entity("Entities.Models.Joint_Models.DlcGenres", b =>
                {
                    b.HasOne("Entities.Models.Dlc", "Dlc")
                        .WithMany("DlcGenres")
                        .HasForeignKey("DlcId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.Genre", "Genre")
                        .WithMany("DlcGenres")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dlc");

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("Entities.Models.Joint_Models.GameDevelopers", b =>
                {
                    b.HasOne("Entities.Models.Developer", "Developer")
                        .WithMany("GameDevelopers")
                        .HasForeignKey("DeveloperId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.Game", "Game")
                        .WithMany("GameDevelopers")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Developer");

                    b.Navigation("Game");
                });

            modelBuilder.Entity("Entities.Models.Joint_Models.GameGenres", b =>
                {
                    b.HasOne("Entities.Models.Game", "Game")
                        .WithMany("GameGenres")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.Genre", "Genre")
                        .WithMany("GameGenres")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("Entities.Models.Developer", b =>
                {
                    b.Navigation("DlcDevelopers");

                    b.Navigation("GameDevelopers");
                });

            modelBuilder.Entity("Entities.Models.Dlc", b =>
                {
                    b.Navigation("DlcDevelopers");

                    b.Navigation("DlcGenres");

                    b.Navigation("DlcReleases");
                });

            modelBuilder.Entity("Entities.Models.Engine", b =>
                {
                    b.Navigation("Games");
                });

            modelBuilder.Entity("Entities.Models.Franchise", b =>
                {
                    b.Navigation("Games");
                });

            modelBuilder.Entity("Entities.Models.Game", b =>
                {
                    b.Navigation("Dlc");

                    b.Navigation("GameDevelopers");

                    b.Navigation("GameGenres");

                    b.Navigation("GameReleases");
                });

            modelBuilder.Entity("Entities.Models.Genre", b =>
                {
                    b.Navigation("DlcGenres");

                    b.Navigation("GameGenres");
                });

            modelBuilder.Entity("Entities.Models.Platform", b =>
                {
                    b.Navigation("DlcReleases");

                    b.Navigation("GameReleases");
                });

            modelBuilder.Entity("Entities.Models.Publisher", b =>
                {
                    b.Navigation("Dlcs");

                    b.Navigation("Games");
                });

            modelBuilder.Entity("Entities.Models.Status", b =>
                {
                    b.Navigation("DlcReleases");

                    b.Navigation("GameReleases");
                });
#pragma warning restore 612, 618
        }
    }
}
